apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: opentelemetry-singly
  namespace: observability
spec:
  securityContext:
    privileged: true
    runAsUser: 0
  mode: deployment
  targetAllocator:
    enabled: false
  envFrom:
    - configMapRef:
        name: stage
  env:
    - name: "OTEL_COLLECTOR_NAME"
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
    - name: "K8S_NODE_NAME"
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  resources:
    requests:
      memory: 1000Mi
      cpu: 100m
    limits:
      memory: 2000Mi
      cpu: 300m


  config:

    receivers:

      prometheus:
        config:
          scrape_configs:
            - job_name: 'apiserver'
              scrape_interval: 60s
              kubernetes_sd_configs:
                - role: endpoints # normally endpoints, but temporary due to a limitation in the targetallocator
              relabel_configs:
                - replacement: kubernetes.default.svc.cluster.local:443
                  target_label: __address__
                - regex: (.+)
                  replacement: /api/v1/nodes/$${1}/proxy/metrics
                  source_labels:
                    - __meta_kubernetes_node_name
                  target_label: __metrics_path__
                - source_labels: [__meta_kubernetes_node_name]
                  target_label: node  # Add node label with current node name
              scheme: https
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: false
                server_name: kubernetes

      otlp/internal_metrics:
        protocols:
          grpc:
            endpoint: localhost:14317

    processors:

      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15

      batch:
        send_batch_max_size: 1000
        send_batch_size: 100
        timeout: 10s

      k8sattributes:
        auth_type: serviceAccount
        extract:
          #          labels:
          #            - from: pod
          #              key: app.kubernetes.io/name
          #              tag_name: kube_app_name
          #            - from: pod
          #              key: app.kubernetes.io/instance
          #              tag_name: kube_app_instance
          #            - from: pod
          #              key: app.kubernetes.io/version
          #              tag_name: kube_app_version
          #            - from: pod
          #              key: app.kubernetes.io/component
          #              tag_name: kube_app_component
          #            - from: pod
          #              key: app.kubernetes.io/part-of
          #              tag_name: kube_app_part_of
          #            - from: pod
          #              key: app.kubernetes.io/managed-by
          #              tag_name: kube_app_managed_by
          metadata:
            - container.image.name
            - container.image.tag
            - container.id
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.cronjob.name
            - k8s.container.name
            - k8s.daemonset.name
            - k8s.daemonset.uid
            - k8s.deployment.name
            - k8s.job.name
            - k8s.node.name
            - k8s.namespace.name
            - k8s.pod.start_time
            - k8s.replicaset.name
            - k8s.replicaset.uid
            - k8s.statefulset.name
            - k8s.statefulset.uid
        filter:
          node_from_env_var: K8S_NODE_NAME
        passthrough: false
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: connection

    exporters:
      debug: {}

      otlphttp/mimir:
        endpoint: http://mimir-nginx.mimir/otlp
        tls:
          insecure: true

    connectors:

    extensions:
      health_check: {}

    service:
      pipelines:
        metrics:
          receivers: [otlp/internal_metrics, prometheus] # spanmetrics, servicegraph, signaltometrics
          processors: [batch, memory_limiter, k8sattributes]
          exporters: [otlphttp/mimir]

      telemetry:
        metrics:
          readers:
            - periodic:
                interval: 10000
                exporter:
                  otlp:
                    protocol: grpc
                    endpoint: localhost:14317
